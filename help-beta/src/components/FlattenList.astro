---
import assert from "node:assert/strict";
import { fromHtml } from "hast-util-from-html";
import { toHtml } from "hast-util-to-html";

const tree = fromHtml(await Astro.slots.render("default"), { fragment: true });

const tree_with_removed_newlines = {
  type: "root",
  children: tree.children.filter((child) => {
    if (child.type === "text" && child.value === "\n") {
      return false;
    }
    return true;
  }),
}
const first_element = tree_with_removed_newlines.children[0];
assert(first_element?.type === "element" && ["ol", "ul"].includes(first_element.tagName));
const flattened = {
  ...first_element,
  children: tree_with_removed_newlines.children.flatMap((other) => {
    assert(other.type === "element" && other.tagName === first_element.tagName);
    return other.children;
  }),
};
---

<Fragment set:html={toHtml(flattened)} />
