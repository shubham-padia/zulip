---
import assert from "node:assert";

import {CORPORATE_ENABLED, SHOW_RELATIVE_LINKS} from "astro:env/client";

/* eslint-disable import/extensions */
import RawZulipIconBarChart from "~icons/zulip-icon/bar-chart?raw";
import RawZulipIconBuilding from "~icons/zulip-icon/building?raw";
import RawZulipIconCreditCard from "~icons/zulip-icon/credit-card?raw";
import RawZulipIconEdit from "~icons/zulip-icon/edit?raw";
import RawZulipIconGear from "~icons/zulip-icon/gear?raw";
import RawZulipIconGitPullRequest from "~icons/zulip-icon/git-pull-request?raw";
import RawZulipIconHash from "~icons/zulip-icon/hash?raw";
import RawZulipIconHelp from "~icons/zulip-icon/help?raw";
import RawZulipIconInfo from "~icons/zulip-icon/info?raw";
import RawZulipIconKeyboard from "~icons/zulip-icon/keyboard?raw";
import RawZulipIconManageSearch from "~icons/zulip-icon/manage-search?raw";
import RawZulipIconRocket from "~icons/zulip-icon/rocket?raw";
import RawZulipIconTool from "~icons/zulip-icon/tool?raw";
import RawZulipIconUserGroupCog from "~icons/zulip-icon/user-group-cog?raw";
/* eslint-enable import/extensions */

const PERSONAL_SETTINGS_TYPE = "Personal settings";
const ORGANIZATION_SETTINGS_TYPE = "Organization settings";
const SHOW_BILLING_HELP_LINKS = CORPORATE_ENABLED;

// This list has been transformed one-off from `help_settings_links.py`, we
// have added a comment in that file to update this list in case of any
// changes.
const setting_link_mapping: Record<
    string,
    {
        setting_type: string;
        setting_name: string;
        setting_link: string;
    }
> = {
    // a mapping from the setting identifier that is the same as the final URL
    // breadcrumb to that setting to the name of its setting type, the setting
    // name as it appears in the user interface, and a relative link that can
    // be used to get to that setting
    profile: {
        setting_type: PERSONAL_SETTINGS_TYPE,
        setting_name: "Profile",
        setting_link: "/#settings/profile",
    },
    "account-and-privacy": {
        setting_type: PERSONAL_SETTINGS_TYPE,
        setting_name: "Account & privacy",
        setting_link: "/#settings/account-and-privacy",
    },
    preferences: {
        setting_type: PERSONAL_SETTINGS_TYPE,
        setting_name: "Preferences",
        setting_link: "/#settings/preferences",
    },
    notifications: {
        setting_type: PERSONAL_SETTINGS_TYPE,
        setting_name: "Notifications",
        setting_link: "/#settings/notifications",
    },
    "your-bots": {
        setting_type: PERSONAL_SETTINGS_TYPE,
        setting_name: "Bots",
        setting_link: "/#settings/your-bots",
    },
    "alert-words": {
        setting_type: PERSONAL_SETTINGS_TYPE,
        setting_name: "Alert words",
        setting_link: "/#settings/alert-words",
    },
    "uploaded-files": {
        setting_type: PERSONAL_SETTINGS_TYPE,
        setting_name: "Uploaded files",
        setting_link: "/#settings/uploaded-files",
    },
    topics: {
        setting_type: PERSONAL_SETTINGS_TYPE,
        setting_name: "Topics",
        setting_link: "/#settings/topics",
    },
    "muted-users": {
        setting_type: PERSONAL_SETTINGS_TYPE,
        setting_name: "Muted users",
        setting_link: "/#settings/muted-users",
    },
    "organization-profile": {
        setting_type: ORGANIZATION_SETTINGS_TYPE,
        setting_name: "Organization profile",
        setting_link: "/#organization/organization-profile",
    },
    "organization-settings": {
        setting_type: ORGANIZATION_SETTINGS_TYPE,
        setting_name: "Organization settings",
        setting_link: "/#organization/organization-settings",
    },
    "organization-permissions": {
        setting_type: ORGANIZATION_SETTINGS_TYPE,
        setting_name: "Organization permissions",
        setting_link: "/#organization/organization-permissions",
    },
    "default-user-settings": {
        setting_type: ORGANIZATION_SETTINGS_TYPE,
        setting_name: "Default user settings",
        setting_link: "/#organization/organization-level-user-defaults",
    },
    "emoji-settings": {
        setting_type: ORGANIZATION_SETTINGS_TYPE,
        setting_name: "Custom emoji",
        setting_link: "/#organization/emoji-settings",
    },
    "auth-methods": {
        setting_type: ORGANIZATION_SETTINGS_TYPE,
        setting_name: "Authentication methods",
        setting_link: "/#organization/auth-methods",
    },
    users: {
        setting_type: ORGANIZATION_SETTINGS_TYPE,
        setting_name: "Users",
        setting_link: "/#organization/users/active",
    },
    deactivated: {
        setting_type: ORGANIZATION_SETTINGS_TYPE,
        setting_name: "Users",
        setting_link: "/#organization/users/deactivated",
    },
    invitations: {
        setting_type: ORGANIZATION_SETTINGS_TYPE,
        setting_name: "Users",
        setting_link: "/#organization/users/invitations",
    },
    "bot-list-admin": {
        setting_type: ORGANIZATION_SETTINGS_TYPE,
        setting_name: "Bots",
        setting_link: "/#organization/bot-list-admin",
    },
    "default-channels-list": {
        setting_type: ORGANIZATION_SETTINGS_TYPE,
        setting_name: "Default channels",
        setting_link: "/#organization/default-channels-list",
    },
    "linkifier-settings": {
        setting_type: ORGANIZATION_SETTINGS_TYPE,
        setting_name: "Linkifiers",
        setting_link: "/#organization/linkifier-settings",
    },
    "playground-settings": {
        setting_type: ORGANIZATION_SETTINGS_TYPE,
        setting_name: "Code playgrounds",
        setting_link: "/#organization/playground-settings",
    },
    "profile-field-settings": {
        setting_type: ORGANIZATION_SETTINGS_TYPE,
        setting_name: "Custom profile fields",
        setting_link: "/#organization/profile-field-settings",
    },
    "data-exports-admin": {
        setting_type: ORGANIZATION_SETTINGS_TYPE,
        setting_name: "Data exports",
        setting_link: "/#organization/data-exports-admin",
    },
};

type RelativeLinkInfo = {
    label: string;
    relative_link: string;
};

const default_template_for_relative_links = `
<ol>
  <li>Click on the <strong>gear</strong> (${RawZulipIconGear}) icon in the upper right corner of the web or desktop app.</li>
  <li>Select {item}.</li>
</ol>
`;

const relative_link_mapping: Record<
    string,
    {
        data: Record<string, RelativeLinkInfo>;
        template: string;
        is_link_relative: () => boolean;
    }
> = {
    gear: {
        data: {
            "channel-settings": {
                label: `${RawZulipIconHash} Channel settings`,
                relative_link: "/#channels/subscribed",
            },
            settings: {
                label: `${RawZulipIconTool} Personal Settings`,
                relative_link: "/#settings/profile",
            },
            "organization-settings": {
                label: `${RawZulipIconBuilding} Organization settings`,
                relative_link: "/#organization/organization-profile",
            },
            "group-settings": {
                label: `${RawZulipIconUserGroupCog} Group settings`,
                relative_link: "/#groups/your",
            },
            stats: {
                label: `${RawZulipIconBarChart} Usage statistics`,
                relative_link: "/stats",
            },
            integrations: {
                label: `${RawZulipIconGitPullRequest} Integrations`,
                relative_link: "/integrations/",
            },
            "about-zulip": {
                label: "About Zulip",
                relative_link: "/#about-zulip",
            },
        },
        template: default_template_for_relative_links,
        is_link_relative: () => SHOW_RELATIVE_LINKS,
    },
    "gear-billing": {
        data: {
            plans: {
                label: `${RawZulipIconRocket} Plans and pricing`,
                relative_link: "/plans/",
            },
            billing: {
                label: `${RawZulipIconCreditCard} Billing`,
                relative_link: "/billing/",
            },
        },
        template: default_template_for_relative_links,
        is_link_relative: () => SHOW_RELATIVE_LINKS && SHOW_BILLING_HELP_LINKS,
    },
    help: {
        data: {
            "keyboard-shortcuts": {
                label: `${RawZulipIconKeyboard} Keyboard shortcuts`,
                relative_link: "/#keyboard-shortcuts",
            },
            "message-formatting": {
                label: `${RawZulipIconEdit} Message formatting`,
                relative_link: "/#message-formatting",
            },
            "search-filters": {
                label: `${RawZulipIconManageSearch} Search filters`,
                relative_link: "/#search-operators",
            },
            "about-zulip": {
                label: `${RawZulipIconInfo} About Zulip`,
                relative_link: "/#about-zulip",
            },
        },
        template: `
<ol>
  <li>Click on the <strong>Help menu</strong> (${RawZulipIconHelp}) icon in the upper right corner of the app.</li>
  <li>Select {item}.</li>
</ol>
`,
        is_link_relative: () => SHOW_RELATIVE_LINKS,
    },
    channel: {
        data: {
            all: {
                label: "All",
                relative_link: "/#channels/all",
            },
            "not-subscribed": {
                label: "Not subscribed",
                relative_link: "/#channels/notsubscribed",
            },
        },
        template: `
<ol>
  <li>Click on the <strong>gear</strong> (${RawZulipIconGear}) icon in the upper right corner of the web or desktop app.</li>
  <li>Select ${RawZulipIconHash} <strong>Channel settings</strong>.</li>
  <li>Click {item} in the upper left.</li>
</ol>
`,
        is_link_relative: () => SHOW_RELATIVE_LINKS,
    },
    group: {
        data: {
            all: {
                label: "All groups",
                relative_link: "/#groups/all",
            },
        },
        template: `
<ol>
  <li>Click on the <strong>gear</strong> (${RawZulipIconGear}) icon in the upper right corner of the web or desktop app.</li>
  <li>Select ${RawZulipIconUserGroupCog} <strong>Group settings</strong>.</li>
  <li>Click {item} in the upper left.</li>
</ol>
`,
        is_link_relative: () => SHOW_RELATIVE_LINKS,
    },
};

const getSettingsMarkdown = (setting_type: string, setting_name: string) => `
<ol>
    <li>
        Click on the <b>gear</b> (${RawZulipIconGear}) icon in the upper
        right corner of the web or desktop app.
    </li>
    <li>
        Select <b>${setting_type}</b>.
    </li>
    <li>
        On the left, click <b>${setting_name}</b>.
    </li>
</ol>
`;

const getSettingsHTML = (
    setting_key: string,
    SHOW_RELATIVE_LINKS: boolean,
): string => {
    const {setting_type, setting_name, setting_link} =
        setting_link_mapping[setting_key]!;

    if (!SHOW_RELATIVE_LINKS) {
        return getSettingsMarkdown(setting_type, setting_name);
    }

    const relativeLink = `<a href="${setting_link}">${setting_name}</a>`;

    // The "Bots" label appears in both Personal and
    // Organization settings in the user interface, so we need special
    // text for this setting.
    // As for the the case of "Users", it refers to the Users tab in
    // organization settings. Since the users tab has multiple sub tabs
    // like active, deactivated etc., we need a way to point to them.
    const label =
        setting_name === "Bots" || setting_name === "Users"
            ? `Navigate to the ${relativeLink} tab of the <b>${setting_type}</b> menu.`
            : `Go to ${relativeLink}.`;

    return `<ol>
                <li>${label}</li>
            </ol>`;
};

const RELATIVE_NAVIGATION_HANDLERS_BY_TYPE: Record<
    string,
    (key: string) => string
> = {};

for (const type of Object.keys(relative_link_mapping)) {
    const {data, template, is_link_relative} = relative_link_mapping[type]!;

    RELATIVE_NAVIGATION_HANDLERS_BY_TYPE[type] = (key: string) => {
        const {label, relative_link} = data[key]!;
        const formattedItem = is_link_relative()
            ? `<a href="${relative_link}">${label}</a>`
            : `<strong>${label}</strong>`;
        return template.replace("{item}", formattedItem);
    };
}

const {identifier} = Astro.props;
const navigation_link_type = identifier.split("/")[0];

if (
    navigation_link_type !== "settings" &&
    navigation_link_type !== "relative"
) {
    throw new Error(
        "Invalid navigation link type. Only `settings` or `relative` is allowed.",
    );
}

let resultHTML: string | undefined;
if (navigation_link_type === "settings") {
    resultHTML = getSettingsHTML(identifier.split("/")[1], SHOW_RELATIVE_LINKS);
} else {
    const link_type = identifier.split("/")[1];
    const key = identifier.split("/")[2];
    resultHTML = RELATIVE_NAVIGATION_HANDLERS_BY_TYPE[link_type]!(key);
}
assert.ok(resultHTML !== undefined);
---

<Fragment set:html={resultHTML} />
